Line No : 2) type_specifier --> VOID
Line No : 2) pointer_optional --> epsilon
Line No : 2) parameter_list_optional --> epsilon
Line No : 2) direct_declarator --> IDENTIFIER '(' parameter_list_optional ')'
Line No : 2) declarator --> pointer_optional direct_declarator
Line No : 3) declaration_list_optional --> epsilon
Line No : 4) type_specifier --> INT
Line No : 4) pointer_optional --> epsilon
Line No : 4) direct_declarator --> IDENTIFIER
Line No : 4) declarator --> pointer_optional direct_declarator
Line No : 4) init_declarator --> declarator
Line No : 4) declaration --> type_specifier init_declarator ';'
Line No : 4) block_item --> declaration
Line No : 4) block_item_list --> block_item
Error occured : = is not defined
 Line no : 5
Line No : 5) primary_expression -> identifier
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Line No : 5) primary_expression --> integer constant
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Line No : 5) multiplicative_expression --> unary_expression
Line No : 5) additive_expression --> multiplicative_expression
Line No : 5) relational_expression --> additive_expression
Line No : 5) equality_expression --> relational_expression
Line No : 5) logical_AND_expression --> equality_expression
Line No : 5) logical_OR_expression --> logical_AND_expression
Line No : 5) conditional_expression --> logical_OR_expression
Line No : 5) assignment_expression --> conditional_expression
Line No : 5) assignment_expression --> unary_expression '=' assignment_expression
Line No : 5) expression --> assignment_expression
Line No : 5) expression_optional --> expression
Error occured : < is not defined
 Line no : 5
Line No : 5) primary_expression -> identifier
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Line No : 5) multiplicative_expression --> unary_expression
Line No : 5) additive_expression --> multiplicative_expression
Line No : 5) relational_expression --> additive_expression
Line No : 5) primary_expression --> integer constant
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Line No : 5) multiplicative_expression --> unary_expression
Line No : 5) additive_expression --> multiplicative_expression
Line No : 5) relational_expression --> relational_expression '<' additive_expression
Line No : 5) equality_expression --> relational_expression
Line No : 5) logical_AND_expression --> equality_expression
Line No : 5) logical_OR_expression --> logical_AND_expression
Line No : 5) conditional_expression --> logical_OR_expression
Line No : 5) assignment_expression --> conditional_expression
Line No : 5) expression --> assignment_expression
Line No : 5) expression_optional --> expression
Error occured : = is not defined
 Line no : 5
Line No : 5) primary_expression -> identifier
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Error occured : + is not defined
 Line no : 5
Line No : 5) primary_expression -> identifier
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Line No : 5) multiplicative_expression --> unary_expression
Line No : 5) additive_expression --> multiplicative_expression
Line No : 5) primary_expression --> integer constant
Line No : 5) postfix_expression --> primary_expression
Line No : 5) unary_expression --> postfix_expression
Line No : 5) multiplicative_expression --> unary_expression
Line No : 5) additive_expression --> additive_expression '+' multplicative_expression
Line No : 5) relational_expression --> additive_expression
Line No : 5) equality_expression --> relational_expression
Line No : 5) logical_AND_expression --> equality_expression
Line No : 5) logical_OR_expression --> logical_AND_expression
Line No : 5) conditional_expression --> logical_OR_expression
Line No : 5) assignment_expression --> conditional_expression
Line No : 5) assignment_expression --> unary_expression '=' assignment_expression
Line No : 5) expression --> assignment_expression
Line No : 5) expression_optional --> expression
Line No : 8) block_item_list_optional --> epsilon
Line No : 8) compound_statement --> '{' block_item_list_optional '}'
Line No : 8) statement --> compound_statement
Line No : 8) iteration_statement --> FOR '(' expression_optional ';' expression_optional ';' expression_optional ')' statement 
Line No : 8) statement --> iteration_statement
Line No : 8) block_item --> statement
Line No : 8) block_item_list --> block_item_list block_item
Line No : 9) expression_optional --> epsilon
Line No : 9) jump_statement --> RETURN expression_optional ';'
Line No : 9) statement --> jump_statement
Line No : 9) block_item --> statement
Line No : 9) block_item_list --> block_item_list block_item
Line No : 10) block_item_list_optional --> block_item_list
Line No : 10) compound_statement --> '{' block_item_list_optional '}'
Line No : 10) function_definition --> type_specifier declarator  declaration_list_optional  compound_statement
Line No : 10) external_declaration --> function_definition
Line No : 10) translation_unit --> external_declaration
Line No : 11) type_specifier --> INT
Line No : 11) pointer_optional --> epsilon
Line No : 11) parameter_list_optional --> epsilon
Line No : 11) direct_declarator --> IDENTIFIER '(' parameter_list_optional ')'
Line No : 11) declarator --> pointer_optional direct_declarator
Line No : 12) declaration_list_optional --> epsilon
Line No : 17) type_specifier --> VOID
Line No : 17) pointer_optional --> *
Line No : 17) direct_declarator --> IDENTIFIER
Line No : 17) declarator --> pointer_optional direct_declarator
Line No : 17) init_declarator --> declarator
Line No : 17) declaration --> type_specifier init_declarator ';'
Line No : 17) block_item --> declaration
Line No : 17) block_item_list --> block_item
Line No : 18) type_specifier --> INT
Line No : 18) pointer_optional --> epsilon
Line No : 18) direct_declarator --> IDENTIFIER
Line No : 18) declarator --> pointer_optional direct_declarator
Line No : 18) init_declarator --> declarator
Line No : 18) declaration --> type_specifier init_declarator ';'
Line No : 18) block_item --> declaration
Line No : 18) block_item_list --> block_item_list block_item
Line No : 19) type_specifier --> INT
Line No : 19) pointer_optional --> epsilon
Line No : 19) direct_declarator --> IDENTIFIER
Line No : 19) declarator --> pointer_optional direct_declarator
Line No : 19) primary_expression --> integer constant
Line No : 19) postfix_expression --> primary_expression
Line No : 19) unary_expression --> postfix_expression
Line No : 19) multiplicative_expression --> unary_expression
Line No : 19) additive_expression --> multiplicative_expression
Line No : 19) relational_expression --> additive_expression
Line No : 19) equality_expression --> relational_expression
Line No : 19) logical_AND_expression --> equality_expression
Line No : 19) logical_OR_expression --> logical_AND_expression
Line No : 19) conditional_expression --> logical_OR_expression
Line No : 19) assignment_expression --> conditional_expression
Line No : 19) initializer --> assignment_expression
Line No : 19) init_declarator --> declarator '=' initializer
Line No : 19) declaration --> type_specifier init_declarator ';'
Line No : 19) block_item --> declaration
Line No : 19) block_item_list --> block_item_list block_item
Line No : 20) primary_expression -> identifier
Line No : 20) postfix_expression --> primary_expression
Line No : 20) unary_expression --> postfix_expression
Line No : 20) unary_operator --> &
Line No : 20) primary_expression -> identifier
Line No : 20) postfix_expression --> primary_expression
Line No : 20) unary_expression --> postfix_expression
Line No : 20) unary_expression --> unary_operator unary_expression
Line No : 20) multiplicative_expression --> unary_expression
Line No : 20) additive_expression --> multiplicative_expression
Line No : 20) relational_expression --> additive_expression
Line No : 20) equality_expression --> relational_expression
Line No : 20) logical_AND_expression --> equality_expression
Line No : 20) logical_OR_expression --> logical_AND_expression
Line No : 20) conditional_expression --> logical_OR_expression
Line No : 20) assignment_expression --> conditional_expression
Line No : 20) assignment_expression --> unary_expression '=' assignment_expression
Line No : 20) expression --> assignment_expression
Line No : 20) expression_optional --> expression
Line No : 20) expression_statement --> expression_optional
Line No : 20) statement --> expression_statement
Line No : 20) block_item --> statement
Line No : 20) block_item_list --> block_item_list block_item
Line No : 22) type_specifier --> INT
Line No : 22) pointer_optional --> *
Line No : 22) direct_declarator --> IDENTIFIER
Line No : 22) declarator --> pointer_optional direct_declarator
Line No : 22) unary_operator --> &
Line No : 22) primary_expression -> identifier
Line No : 22) postfix_expression --> primary_expression
Line No : 22) unary_expression --> postfix_expression
Line No : 22) unary_expression --> unary_operator unary_expression
Line No : 22) multiplicative_expression --> unary_expression
Line No : 22) additive_expression --> multiplicative_expression
Line No : 22) relational_expression --> additive_expression
Line No : 22) equality_expression --> relational_expression
Line No : 22) logical_AND_expression --> equality_expression
Line No : 22) logical_OR_expression --> logical_AND_expression
Line No : 22) conditional_expression --> logical_OR_expression
Line No : 22) assignment_expression --> conditional_expression
Line No : 22) initializer --> assignment_expression
Line No : 22) init_declarator --> declarator '=' initializer
Line No : 22) declaration --> type_specifier init_declarator ';'
Line No : 22) block_item --> declaration
Line No : 22) block_item_list --> block_item_list block_item
Line No : 23) primary_expression -> identifier
Line No : 23) postfix_expression --> primary_expression
Line No : 23) unary_expression --> postfix_expression
Line No : 23) unary_operator --> *
Line No : 23) primary_expression -> identifier
Line No : 23) postfix_expression --> primary_expression
Line No : 23) unary_expression --> postfix_expression
Line No : 23) unary_expression --> unary_operator unary_expression
Line No : 23) multiplicative_expression --> unary_expression
Line No : 23) additive_expression --> multiplicative_expression
Line No : 23) relational_expression --> additive_expression
Line No : 23) equality_expression --> relational_expression
Line No : 23) logical_AND_expression --> equality_expression
Line No : 23) logical_OR_expression --> logical_AND_expression
Line No : 23) conditional_expression --> logical_OR_expression
Line No : 23) assignment_expression --> conditional_expression
Line No : 23) assignment_expression --> unary_expression '=' assignment_expression
Line No : 23) expression --> assignment_expression
Line No : 23) expression_optional --> expression
Line No : 23) expression_statement --> expression_optional
Line No : 23) statement --> expression_statement
Line No : 23) block_item --> statement
Line No : 23) block_item_list --> block_item_list block_item
Line No : 25) type_specifier --> CHAR
Line No : 25) pointer_optional --> epsilon
Line No : 25) direct_declarator --> IDENTIFIER
Line No : 25) declarator --> pointer_optional direct_declarator
Parsing Error...: '

Parsing Error...: \

Line No : 25) primary_expression --> integer constant
Line No : 25) postfix_expression --> primary_expression
Line No : 25) unary_expression --> postfix_expression
Parsing Error...: '

Line No : 25) multiplicative_expression --> unary_expression
Line No : 25) additive_expression --> multiplicative_expression
Line No : 25) relational_expression --> additive_expression
Line No : 25) equality_expression --> relational_expression
Line No : 25) logical_AND_expression --> equality_expression
Line No : 25) logical_OR_expression --> logical_AND_expression
Line No : 25) conditional_expression --> logical_OR_expression
Line No : 25) assignment_expression --> conditional_expression
Line No : 25) initializer --> assignment_expression
Line No : 25) init_declarator --> declarator '=' initializer
Line No : 25) declaration --> type_specifier init_declarator ';'
Line No : 25) block_item --> declaration
Line No : 25) block_item_list --> block_item_list block_item
Line No : 27) type_specifier --> INT
Line No : 27) pointer_optional --> epsilon
Line No : 27) direct_declarator --> IDENTIFIER '[' INTEGER_CONSTANT ']'
Line No : 27) declarator --> pointer_optional direct_declarator
Line No : 27) init_declarator --> declarator
Line No : 27) declaration --> type_specifier init_declarator ';'
Line No : 27) block_item --> declaration
Line No : 27) block_item_list --> block_item_list block_item
Line No : 28) primary_expression --> integer constant
Line No : 28) postfix_expression --> primary_expression
Line No : 28) unary_expression --> postfix_expression
Line No : 28) multiplicative_expression --> unary_expression
Line No : 28) additive_expression --> multiplicative_expression
Line No : 28) relational_expression --> additive_expression
Line No : 28) equality_expression --> relational_expression
Line No : 28) logical_AND_expression --> equality_expression
Line No : 28) logical_OR_expression --> logical_AND_expression
Line No : 28) conditional_expression --> logical_OR_expression
Line No : 28) assignment_expression --> conditional_expression
Line No : 28) expression --> assignment_expression
Line No : 28) IDENTIFIER --> IDENTIFIER [ expression ]
Line No : 28) unary_expression --> postfix_expression
Line No : 28) primary_expression --> integer constant
Line No : 28) postfix_expression --> primary_expression
Line No : 28) unary_expression --> postfix_expression
Line No : 28) multiplicative_expression --> unary_expression
Line No : 28) additive_expression --> multiplicative_expression
Line No : 28) relational_expression --> additive_expression
Line No : 28) equality_expression --> relational_expression
Line No : 28) logical_AND_expression --> equality_expression
Line No : 28) logical_OR_expression --> logical_AND_expression
Line No : 28) conditional_expression --> logical_OR_expression
Line No : 28) assignment_expression --> conditional_expression
Line No : 28) assignment_expression --> unary_expression '=' assignment_expression
Line No : 28) expression --> assignment_expression
Line No : 28) expression_optional --> expression
Line No : 28) expression_statement --> expression_optional
Line No : 28) statement --> expression_statement
Line No : 28) block_item --> statement
Line No : 28) block_item_list --> block_item_list block_item
Line No : 29) primary_expression --> integer constant
Line No : 29) postfix_expression --> primary_expression
Line No : 29) unary_expression --> postfix_expression
Line No : 29) multiplicative_expression --> unary_expression
Line No : 29) additive_expression --> multiplicative_expression
Line No : 29) relational_expression --> additive_expression
Line No : 29) equality_expression --> relational_expression
Line No : 29) logical_AND_expression --> equality_expression
Line No : 29) logical_OR_expression --> logical_AND_expression
Line No : 29) conditional_expression --> logical_OR_expression
Line No : 29) assignment_expression --> conditional_expression
Line No : 29) expression --> assignment_expression
Line No : 29) IDENTIFIER --> IDENTIFIER [ expression ]
Line No : 29) unary_expression --> postfix_expression
Line No : 29) primary_expression --> integer constant
Line No : 29) postfix_expression --> primary_expression
Line No : 29) unary_expression --> postfix_expression
Line No : 29) multiplicative_expression --> unary_expression
Line No : 29) additive_expression --> multiplicative_expression
Line No : 29) relational_expression --> additive_expression
Line No : 29) equality_expression --> relational_expression
Line No : 29) logical_AND_expression --> equality_expression
Line No : 29) logical_OR_expression --> logical_AND_expression
Line No : 29) conditional_expression --> logical_OR_expression
Line No : 29) assignment_expression --> conditional_expression
Line No : 29) assignment_expression --> unary_expression '=' assignment_expression
Line No : 29) expression --> assignment_expression
Line No : 29) expression_optional --> expression
Line No : 29) expression_statement --> expression_optional
Line No : 29) statement --> expression_statement
Line No : 29) block_item --> statement
Line No : 29) block_item_list --> block_item_list block_item
Line No : 30) primary_expression --> integer constant
Line No : 30) postfix_expression --> primary_expression
Line No : 30) unary_expression --> postfix_expression
Line No : 30) multiplicative_expression --> unary_expression
Line No : 30) additive_expression --> multiplicative_expression
Line No : 30) relational_expression --> additive_expression
Line No : 30) equality_expression --> relational_expression
Line No : 30) logical_AND_expression --> equality_expression
Line No : 30) logical_OR_expression --> logical_AND_expression
Line No : 30) conditional_expression --> logical_OR_expression
Line No : 30) assignment_expression --> conditional_expression
Line No : 30) expression --> assignment_expression
Line No : 30) IDENTIFIER --> IDENTIFIER [ expression ]
Line No : 30) unary_expression --> postfix_expression
Line No : 30) primary_expression --> integer constant
Line No : 30) postfix_expression --> primary_expression
Line No : 30) unary_expression --> postfix_expression
Line No : 30) multiplicative_expression --> unary_expression
Line No : 30) additive_expression --> multiplicative_expression
Line No : 30) relational_expression --> additive_expression
Line No : 30) equality_expression --> relational_expression
Line No : 30) logical_AND_expression --> equality_expression
Line No : 30) logical_OR_expression --> logical_AND_expression
Line No : 30) conditional_expression --> logical_OR_expression
Line No : 30) assignment_expression --> conditional_expression
Line No : 30) assignment_expression --> unary_expression '=' assignment_expression
Line No : 30) expression --> assignment_expression
Line No : 30) expression_optional --> expression
Line No : 30) expression_statement --> expression_optional
Line No : 30) statement --> expression_statement
Line No : 30) block_item --> statement
Line No : 30) block_item_list --> block_item_list block_item
Line No : 31) primary_expression --> integer constant
Line No : 31) postfix_expression --> primary_expression
Line No : 31) unary_expression --> postfix_expression
Line No : 31) multiplicative_expression --> unary_expression
Line No : 31) additive_expression --> multiplicative_expression
Line No : 31) relational_expression --> additive_expression
Line No : 31) equality_expression --> relational_expression
Line No : 31) logical_AND_expression --> equality_expression
Line No : 31) logical_OR_expression --> logical_AND_expression
Line No : 31) conditional_expression --> logical_OR_expression
Line No : 31) assignment_expression --> conditional_expression
Line No : 31) expression --> assignment_expression
Line No : 31) IDENTIFIER --> IDENTIFIER [ expression ]
Line No : 31) unary_expression --> postfix_expression
Line No : 31) primary_expression --> integer constant
Line No : 31) postfix_expression --> primary_expression
Line No : 31) unary_expression --> postfix_expression
Line No : 31) multiplicative_expression --> unary_expression
Line No : 31) additive_expression --> multiplicative_expression
Line No : 31) relational_expression --> additive_expression
Line No : 31) equality_expression --> relational_expression
Line No : 31) logical_AND_expression --> equality_expression
Line No : 31) logical_OR_expression --> logical_AND_expression
Line No : 31) conditional_expression --> logical_OR_expression
Line No : 31) assignment_expression --> conditional_expression
Line No : 31) assignment_expression --> unary_expression '=' assignment_expression
Line No : 31) expression --> assignment_expression
Line No : 31) expression_optional --> expression
Line No : 31) expression_statement --> expression_optional
Line No : 31) statement --> expression_statement
Line No : 31) block_item --> statement
Line No : 31) block_item_list --> block_item_list block_item
Line No : 33) type_specifier --> CHAR
Line No : 33) pointer_optional --> *
Line No : 33) direct_declarator --> IDENTIFIER
Line No : 33) declarator --> pointer_optional direct_declarator
Line No : 33) primary_expression --> string literal
Line No : 33) postfix_expression --> primary_expression
Line No : 33) unary_expression --> postfix_expression
Line No : 33) multiplicative_expression --> unary_expression
Line No : 33) additive_expression --> multiplicative_expression
Line No : 33) relational_expression --> additive_expression
Line No : 33) equality_expression --> relational_expression
Line No : 33) logical_AND_expression --> equality_expression
Line No : 33) logical_OR_expression --> logical_AND_expression
Line No : 33) conditional_expression --> logical_OR_expression
Line No : 33) assignment_expression --> conditional_expression
Line No : 33) initializer --> assignment_expression
Line No : 33) init_declarator --> declarator '=' initializer
Line No : 33) declaration --> type_specifier init_declarator ';'
Line No : 33) block_item --> declaration
Line No : 33) block_item_list --> block_item_list block_item
Line No : 34) argument_expression_list_opt --> epsilon
Line No : 34) IDENTIFIER --> IDENTIFIER ( argument_expression_list_optional )
Line No : 34) unary_expression --> postfix_expression
Line No : 34) multiplicative_expression --> unary_expression
Line No : 34) additive_expression --> multiplicative_expression
Line No : 34) relational_expression --> additive_expression
Line No : 34) equality_expression --> relational_expression
Line No : 34) logical_AND_expression --> equality_expression
Line No : 34) logical_OR_expression --> logical_AND_expression
Line No : 34) conditional_expression --> logical_OR_expression
Line No : 34) assignment_expression --> conditional_expression
Line No : 34) expression --> assignment_expression
Line No : 34) expression_optional --> expression
Line No : 34) expression_statement --> expression_optional
Line No : 34) statement --> expression_statement
Line No : 34) block_item --> statement
Line No : 34) block_item_list --> block_item_list block_item
Line No : 35) primary_expression --> integer constant
Line No : 35) postfix_expression --> primary_expression
Line No : 35) unary_expression --> postfix_expression
Line No : 35) multiplicative_expression --> unary_expression
Line No : 35) additive_expression --> multiplicative_expression
Line No : 35) relational_expression --> additive_expression
Line No : 35) equality_expression --> relational_expression
Line No : 35) logical_AND_expression --> equality_expression
Line No : 35) logical_OR_expression --> logical_AND_expression
Line No : 35) conditional_expression --> logical_OR_expression
Line No : 35) assignment_expression --> conditional_expression
Line No : 35) expression --> assignment_expression
Line No : 35) expression_optional --> expression
Line No : 35) jump_statement --> RETURN expression_optional ';'
Line No : 35) statement --> jump_statement
Line No : 35) block_item --> statement
Line No : 35) block_item_list --> block_item_list block_item
Line No : 36) block_item_list_optional --> block_item_list
Line No : 36) compound_statement --> '{' block_item_list_optional '}'
Line No : 36) function_definition --> type_specifier declarator  declaration_list_optional  compound_statement
Line No : 36) external_declaration --> function_definition
Line No : 36) translation_unit --> translation_unit external_declaration

+---------------------------------------+

Successs :)

)
;
)
;
;
=
=
=
]
=
Successs :)

